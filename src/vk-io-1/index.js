// @ts-check
const { VK } = require('vk-io');
const { HearManager } = require('@vk-io/hear');

const vk = new VK({
  token: 'ff9ac4f39527d7c856198e454aa3b09a5fb1826fe8c3f9ec0c8ad955e7a1b57efee3b75ae4ff3445d7441'
});
const config = {};
const commands = [];
const developer = 582059218;
const accounts = [];
// setInterval(async () => { await saveAll(); }, 500);
const utils = {
  pick: (array) => array[utils.random(array.length - 1)],
  random: (x, y) => (y ? Math.round(Math.random() * (y - x)) + x : Math.round(Math.random() * x))
};
const keyboard = (object) => ({
  keyboard: JSON.stringify({
    one_time: false,
    buttons: object
  })
});
async function saveAccounts() {
  console.log(accounts);
  // require('fs').writeFileSync('./database/accounts.json', JSON.stringify(accounts, null, '\t'));
  return true;
}
async function saveAll() {
  console.log(accounts);
  // require('fs').writeFileSync('./database/accounts.json', JSON.stringify(accounts, null, '\t'));
  return true;
}
vk.updates.on('message', async (message) => {
  console.log(message);
  if (Number(message.senderId) <= 0) return;
  if (/\[club204049539\|(.*)\]/i.test(message.text)) message.text = message.text.replace(/\[club204049539\|(.*)\]/ig, '').trim();
  if (message.isChat) return;
  // let res = await vkc.api.getMyBalance();
  // console.log(Number(res))
  if (!accounts.find((x) => x.id === message.senderId)) {
    const [user_info] = await vk.api.users.get({ user_id: message.senderId });
    const date = new Date();
    accounts.push({
      id: message.senderId,
      uid: accounts.length,
      name: user_info.first_name
    });
    saveAccounts();
    return message.send('–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!', keyboard(
      [[{
        action: {
          type: 'text',
          payload: '{}',
          label: 'üëâ –£–¥–≤–æ–∏—Ç—å –î–µ–Ω—å–≥–∏ üëà'
        },
        color: 'positive'
      }],
      [{
        action: {
          type: 'text',
          payload: '{}',
          label: 'üìí –ò–Ω—Ñ–æ üìí'
        },
        color: 'negative'
      }],
      [{
        action: {
          type: 'text',
          payload: '{}',
          label: '–í—ã–≤–æ–¥'
        },
        color: 'negative'
      }]]
    ));
  }
});

const cmd = {
  hear: (p, f) => {
    commands.push([p, f]);
  }
};
cmd.hear(/^(?:üëâ –£–¥–≤–æ–∏—Ç—å –î–µ–Ω—å–≥–∏ üëà)$/i, async (message, bot) => {
  return bot('üì• –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å –ª—é–±—É—é –ø–æ —Å—Å—ã–ª–∫–µ');
  return bot(`–ù–µ–∑–∞–±—É—Ç—å —É–∫–∞–∑–∞—Ç—å –∞–π–¥–∏: ${message.senderId} –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏`);
});


cmd.hear(/^(?:üìí –ò–Ω—Ñ–æ üìí)$/i, async (message, bot) => bot('–ò–Ω—Ñ–æ'));

cmd.hear(/^(?:–ù–∞—á–∞—Ç—å)$/i, async (message, bot) => bot('–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!'));

vk.updates.startPolling();
